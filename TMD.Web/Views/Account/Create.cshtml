@model  TMD.Web.ViewModels.AspNetUsersViewModel
@{
    ViewBag.Title = "Register User";
    string btnText = "Save";
    var setDiasble = "false";
    Session["MenuKey"] = 3;
    if (Model != null)
    {
        if (!string.IsNullOrEmpty(Model.AspNetUserModel.Id))
        {
            ViewBag.Title = "Update User";
            btnText = "Update";
            setDiasble = "readonly";
        }
    }
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    ViewBag.MessageVM = TempData["message"];
}

@*<link rel="stylesheet" type="text/css" href="~/Scripts/App/select2/select2.css" />*@
@*<script type="text/javascript" src="~/Scripts/App/select2/select2.js"></script>*@

<!-- Navigation Bar -->
<!-- Page heading -->

<!--Notifications begin-->
@Html.Partial("_Alert")
<!--Notifications end-->
<!-- Page heading ends -->
<!-- Form starts.  -->
@using (Html.BeginForm("Create", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @*@Html.AntiForgeryToken()
    @Html.ValidationSummary(true)*@
    <div class="portlet box blue-hoki">
        <div class="portlet-title">

            <div class="tools">
                @*<a href="javascript:;" class="collapse">
            </a>*@

                <button type="submit" class="btn btn-circle blue" onclick="return(ValidateFields(event) && validateUserPassword(event));">Submit</button>
                <a href="~/Account/Users">
                    <button type="button" class="btn btn-circle default">Cancel</button>
                </a>
            </div>
            <div class="caption">
                <i class="fa fa-male"></i>Create/Update Employees
            </div>
        </div>

        <div class="portlet-body form">
            <div class="container-fluid">
                @Html.AntiForgeryToken()

                @*@Html.HiddenFor(m => m.UserId)
                    @Html.HiddenFor(m => m.oldRole)*@
                
                <div class="form-group margin-top-20">
                    <label class="col-md-3 control-label" >First Name</label>
                    <div class="col-md-4">
                        <input type="text" name="AspNetUserModel.FirstName" id="FirstName" class="form-control input-circle mandatory"  placeholder="Enter First Name">
                        @*@Html.ValidationMessageFor(m => m.AspNetUserModel.FirstName, "", new { @class = "required" })*@
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-md-3 control-label" name="LastName">Last Name</label>
                    <div class="col-md-4">
                        <input type="text" name="sAspNetUserModel.LastName" id="LastName" class="form-control input-circle mandatory" placeholder="Enter Last Name">
                    </div>
                    @Html.ValidationMessageFor(m => m.AspNetUserModel.LastName, "", new {@class = "required"})
                </div>

                <div class="form-group">
                    <label class="col-md-3 control-label" name="LastName">Username</label>
                    <div class="col-md-4">
                        <input type="text" name="AspNetUserModel.UserName" id="UserName" class="form-control input-circle mandatory" placeholder="Enter UserName">
                    </div>
                    @Html.ValidationMessageFor(m => m.AspNetUserModel.UserName, "", new {@class = "required"})
                </div>


                <div class="form-group">
                    <label class="col-md-3 control-label" >Email</label>
                    <div class="col-md-4">
                        <input type="email" id="Email" name="AspNetUserModel.Email" class="form-control input-circle mandatory" placeholder="Enter email">
                    </div>
                    @Html.ValidationMessageFor(m => m.AspNetUserModel.Email, "", new {@class = "required"})
                </div>

            
                <div class="form-group">
                    <label class="col-md-3 control-label">Address</label>
                    <div class="col-md-4">
                        <input id="Address" name="AspNetUserModel.Address" class="form-control input-circle mandatory" placeholder="Enter Address">
                    </div>
                    @Html.ValidationMessageFor(m => m.AspNetUserModel.Address, "", new { @class = "required" })
                </div>
            

                <div class="form-group">
                    <label class="col-md-3 control-label">Telephone</label>
                    <div class="col-md-4">
                        <input id="Address" name="AspNetUserModel.Telephone" class="form-control input-circle mandatory" placeholder="Enter Telephone">
                    </div>
                    @Html.ValidationMessageFor(m => m.AspNetUserModel.Telephone, "", new { @class = "required" })
                </div>


                @if (Model != null)
                {
                    <div class="form-group">
                        <label class="col-md-3 control-label" name="LastName">Role</label>
                        <div class="col-md-4">
                            @Html.DropDownListFor(m => m.AspNetUserModel.RoleId, new SelectList(Model.Roles, "Id", "Name"), "Select Role", new { @class = "form-control", id = "RoleId" })
                            <label id="roleValidation" style="display: none; color: red"></label>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="col-md-3 control-label" name="LastName">Password</label>
                        <div class="col-md-4">
                            @Html.PasswordFor(m => m.AspNetUserModel.Password, new {@class = "form-control input-circle mandatory", placeholder = "Password", id = "Password"})

                        </div>
                        @Html.ValidationMessageFor(m => m.AspNetUserModel.Password, "", new {@class = "required"})
                    </div>

                    <div class="form-group">
                        <label class="col-md-3 control-label" name="LastName">Password</label>
                        <div class="col-md-4">
                            @Html.PasswordFor(m => m.AspNetUserModel.ConfirmPassword, new {@class = "form-control input-circle mandatory", placeholder = "Confirm Password", id = "ConfirmPassword"})

                        </div>
                        @Html.ValidationMessageFor(m => m.AspNetUserModel.ConfirmPassword, "", new {@class = "required"})
                    </div>


                }
            @*<div class="control-group row-fluid">
                    <div class="span3 span-inset">
                        <button type="submit" class="btn" onclick="return validateUserPassword(event);">@btnText</button>
                    </div>
                </div>*@</div>
            
        </div>
    </div>
}
        <!-- Matter ends -->

        <script>
            $(function () {

                $("[readonly='false']").removeAttr("readonly");

            });
            function validateUserPassword(event) {
                var userPassword = $("#password").val();
                var selectedRole = $("#RoleId").val();
                var model = @(Model.AspNetUserModel.Id == null ? "true" : "false");
                var counter = 0;
                //if ((userPassword == null || userPassword == "") && model) {
                //    $("#passwordAuthentication").text("Password Field is required");
                //    $("#passwordAuthentication").addClass("Error");
                //    counter++;
                //} else if (userPassword.length < 6 && model) {
                //    $("#passwordAuthentication").text("Minimum Password length is 6 characters");
                //    $("#passwordAuthentication").addClass("Error");
                //    counter++;
                //}
                //else {
                //    $("#passwordAuthentication").text("");
                //    $("#passwordAuthentication").removeClass("Error");
                //}
                if ((selectedRole == null || selectedRole == "" || selectedRole == undefined) && model) {
                    $("#roleValidation").text("Please Select Role");
                    $("#roleValidation").addClass("Error");
                    counter++;
                } else {
                    $("#roleValidation").text("");
                    $("#roleValidation").removeClass("Error");
                }
                if (counter > 0) {
                    //implementing focus back to error
                    if ($(".Error").length > 0) {
                        var divId = $(".Error")[0].id;
                        if ($("#" + divId).length > 0)
                            $("#" + divId).focus();
                        event.preventDefault();
                        return false;
                    }
                }
                return true;
            }

        </script>
